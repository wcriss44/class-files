Keywords and things to look up:
    Anonymous
    Abstract
    Concrete
    Lambda
    Thread
    Interface
    FunctionalInterface
        Runnable //A specific FI in Java

So far we have been using predefined classes that we make. Wouldn't it be nice if we could could write code that deals with classes and changes on the fly? That is what anonymous classes and methods do for us.

Anonymous methods use lambda expressions to accomplish this. Lambda expressions allow us to define the body of a method dynamically.

Anonymous classes are classes that do not have a name.

Lets do an example! Start Intellij and open your Zoo project from a few weeks ago.

Once the project is open create a class named AnonymousClassExample

In your name class, add a main method:
    public static void main(String args[]){

    }

in your main method, add the following line:
    //This line will allow you to change a method on the fly
    Reptile alligator = new Reptile() {
        @Override
        public void makeSound(){

        }
    };

Now give your ally-gator a name!
    alligator.name = "Alligator";

Lastly, call make sound:

    alligator.makeSound();

As you can see, the alligator made a sound that was not previsouly defined. Doing our code this way allowed us to change the method when we created our object.

This is a good benefit because it will allow us to reuse a class with out having to write a new class each time. Another great benefit of creating our objects this way is it allows us to rapidly have unique objects with out having to have a class for each slightly different version.

Anonymous methods work differently but are used for the same purpose.

Create a new class called AnonymousMethodExample

Inside of your new class, make a new main method:
    public static void main(String args[]){

    }

Inside of the main method, create a method call:
    sayHello();

Next, create a lambda expression:
    Runnable r2 = () -> {
        System.out.println("Hello from a lambda!");
    } // Runnable is an interface that we can call. It is predefined

Now run your new newly created lambda expression:
    r2.run(); //You are using the r2 variable's run method

Next, lets add a method called sayHello() outside of main
    public static void sayHello(){
        System.out.println("Hello from named method!");
    }

Your class will do the following:
    call a named method, named sayHello. This method will print a message.
    Create a new thread named r2 and give it the functionality of printing a different message.
    Call your r2 thread and do the run method.


// command + click will show you the definition of a class or method. Try it on runnable!

FunctionalInterfaces, such as Runnable, are intended to specify what methods a class should have. You can implement interfaces and use abstract methods from a functionalinterface.

Abstraction refers to knowning you can do things with out knowning how to do it. The concrete part of a method is how to do it, or the logic behind it. The abstract aspect is knowing you can do it but not needing to know the concrete part.

Threads are used to run multiple processes within your program. With out threads, our program will only be able to do one process at a time. Threads allow us to handle multiple processes simultaniously. Some issues that can arise with threads is syncronization amongst others.

Runnable interface is a way to create a new thread.


Now, lets take a look at spark

Create a new project in Intellij named HelloSpark

Add two libraries to your HelloSpark project:
    com.sparkjava:spark-core:2.3
    com.sparkjava:spark-template-mustache:2.3

As you can notice, the spark import contains quite a few libraries. Reading through some of the importated libraries you can notice a server, servlet, and even a security package.

Next, add a new folder under project structure -> modules

Name this folder "Resources" and flag it as resources. This folder will contain resources for your web app.

The last thing you need to do for this step is to create a folder within your resources folder named templates.

add the following to your body: //you should be able to do this within any normal header or paragraph tag!

Hello, {{name}}!

As you can see, {{name}} is different then a traditional HTML file.

Now we can write some spark code that will respond to a get request from a user. Lets take a look:

inside of your Main class and main method, add the following:
    Spark.init();

    Spark.get(
              "/"
              ((request, response) -> {
                  HashMap m = new HashMap();
                  m.put("name", "Alice");
                  return new ModelAndView(m, "home.html");
          }),
          new MustacheTemplateEngine()
    );

Notice that we are puting a key/value pair into a hashmap. The key is "name" and the value is "Alice". If Spark detects this key, the value will be displayed.

The .get method waits for a request, that is to say it waits for the user to access the page. If it detects that the user request a page we will then use a lambda expression to pass in the functionality. That functionality is declaring a new hashmpa, putting the key/value in, and returning a new ModelAndView object with the hashmap we made as well as "home.html" which is the template we want to load. Lastly, we create a new mustachetemplate engine to run things.

Notice also that we are returning a new ModleAndView. This should be familiar because we learned last week about MVC. As this would imply, we are returning a new Model and View based on our hashmap and home.html. Our controller is our Main, m is our model(data), and View is our home.html(what the user sees).

Now lets expand our program slightly. Instead of having a static name declaration, lets set up a login that will capture the user name.

Create a new HTML file named login.html in your templates, and add a form to it:
    <form action="/login" method="post">
        <input type ="text" placeholder ="Enter your name" name ="loginName"/>
        <button type ="submmit">Login</button>
    </form>

Go back to your Main class and create a static user before your main method:
    static User user;

Inside your main method, add an if statement to your get lambda, after HashMap m - new HashMap();

    if (user == null) {
        return new ModelAndView(m, "login.html");
    } else {
        //the two lines form before.. m.put and return
    }

Lastly, add a lambda for post:
    Spark.post(
              "/login",
              ((request, response) -> {
                  String name = request.queryParams("loginName");
                  user = new User(name);
                  response.redirect("/");
                  return "";
          })
    );


