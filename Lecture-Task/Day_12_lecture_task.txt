Steps for deployment to Heroku:
heroku login
cd into git repository
heroku create
git push heroku BRANCHNAME
heroku ps:scale web=1
heroku open


Today's topic will cover dependency and package management.

First, install maven and gradle:

go to terminal and type:
mvn -version
    if nothing shows up, type:
        brew install maven

gradle -version
    if nothing shows up, type:
        brew instal gradle

PaaS is platform as a service, it allows programmers to focus on products and not worry about the expense of hosting.

Microsoft Azure and Amazon AWS are two famous PaaS providers. Heroku, which we will use during this lab, is another commonly used Heroku.

It is recommended to spend some time creating an account through AWS and learning some of the basic features

Saas is another common service provided by cloud services. Saas allows you to run software as a service, where you don't have to develop it yourself.

CLI is a commonly used acronym that stands for Command Line Interface. This is often used in reference to installing Command Line Tools.

Once you sign up for Heroku, go to your terminal and run brew install heroku. This will install the Heroku CLI

pom.xml is used by Maven


Common problems with large production projects:

mission, naming convetions, sharing, synchronizing, documentation, duplicate work(not resuing), planning

Maven is a tool that can help solve many of these issues. Maven lets you manage dependencies within your software. Maven lets you compile, build, and deploy in a more automated fashion.

pom.xml, as mentioned above, is a file used by Maven. pom.xml is where you specify what libraries and classes are used in your project. pom.xml also allows you to specifiy all of the build, compile, and other specifications. When you run mvn [project], your pom.xml file will manage all of the importing and other specifications you declared within your pom.xml file.

When we used the jodd library to serialize our objects, we used maven to specificy the library. This specification was entered into our pom.xml file.

lets deploy a java program using maven to heroku:

go to: https://devcenter.heroku.com/articles/getting-started-with-java#introduction

and click on I'm ready to start

the CLI is already installed so click next.

now copy the information from the screen and enter the git command / cd command

now deploy the app!

terminal -> heroku create

this will create a heroku app for your project.

Next, type git push heroku master

now you can verify the deployment:

heroku ps:scale web=1

lastly, you can visit by typing heroku open!

to see your logs type heroku logs --tail

you can exit that screen with control+c

Procfiles tell heroku how to run the app. You can see your procfile by typing vim Procfile

heroku uses your pom.xml to see all of your dependencies

you can type mvn clean install to create your pom file and set things up.

next, type:
    heroku local web

this will create a local website for you. You can visit it by typing http://localhost:5000

when you are ready to stop, do control+c to quit

We covered adding a dependency to your pom.xml file. To do this, open the pom.xml file and add the dependency between two new <dependency> </dependency> tags.

you can then do a mvn clean install.

this project made use of Spark, which we will use next week to deliver java web applications.

