Today's lecture will cover paging and sorting.

First, create a new Spring project called IronGram. Include the following in your project: Web, DevTools, JPA, H2

For this project we will use H2. We are using H2 because it is an embedded database. This allows us to build a jar and have other people access our program, with out a need to set up a database.

Once you have your project, open it and add the following to application.properties:

spring.datasource.url=jdbc:h2:./main
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none

Lets start by creating an entity to represent our users and another for our photos. Make two classes in the /entities package that have this code, respectively

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue
    int id;

    @Column(nullable = false, unique = true)
    String name;

    @Column(nullable = false)
    String password;

    public User() {
    }

    public User(String name, String password) {
        this.name = name;
        this.password = password;
    }
}

@Entity
@Table(name = "photos")
public class Photo {
    @Id
    @GeneratedValue
    int id;

    @ManyToOne
    User sender;

    @ManyToOne
    User recipient;

    @Column(nullable = false)
    String filename;

    public Photo() {
    }

    public Photo(User sender, User recipient, String filename) {
        this.sender = sender;
        this.recipient = recipient;
        this.filename = filename;
    }
}

Make sure to add getters and setters to both classes. If you forget to we won't be able to serialize them to JSON. Next, create your repositories for both entities in the services package:

public interface UserRepository extends CrudRepository<User, Integer> {
    User findFirstByName(String name);
}

public interface PhotoRepository extends CrudRepository<Photo, Integer> {
}

Now we can add the controller under the controllers package:

@RestController
public class IronGramController {
    @Autowired
    UserRepository users;

    @Autowired
    PhotoRepository photos;
}


If you are using Maven, the next step will require you to change the scope of the following dependencies to compile. If you are using gradle, change it to this:

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

Next, add the following to your RestController:

    Server dbui = null;

    @PostConstruct
    public void init() throws SQLException {
        dbui = Server.createWebServer().start();
    }

    @PreDestroy
    public void destroy() {
        dbui.stop();
    }

Now we are ready to start on our routes. First, download the PasswordStorage file from the iron yard. Move this (class) file into a new package named utilities.

Next, add the following routes to your controller:

   @RequestMapping(path = "/login", method = RequestMethod.POST)
    public User login(String username, String password, HttpSession session, HttpServletResponse response) throws Exception {
        User user = users.findByName(username);
        if (user == null) {
            user = new User(username, PasswordStorage.createHash(password));
            users.save(user);
        }
        else if (!PasswordStorage.verifyPassword(password, user.getPassword())) {
            throw new Exception("Wrong password");
        }
        session.setAttribute("username", username);
        response.sendRedirect("/");
        return user;
    }

    @RequestMapping("/logout")
    public void logout(HttpSession session, HttpServletResponse response) throws IOException {
        session.invalidate();
        response.sendRedirect("/");
    }

    @RequestMapping(path = "/user", method = RequestMethod.GET)
    public User getUser(HttpSession session) {
        String username = (String) session.getAttribute("username");
        return users.findByName(username);
    }
Next we need to add the HTML for our project. First download Jquery and move it into your public folder. Next, create this html file as index.html and place it in your public folder as well:

<html>
<body>
<form action="/login" method="post" id="login" hidden>
    <input type="text" placeholder="Username" name="username"/>
    <input type="password" placeholder="Password" name="password"/>
    <button type="submit">Login</button>
</form>

<form action="/logout" method="post" id="logout" hidden>
    <button type="submit">Logout</button>
</form>

<script src="jquery-2.1.4.min.js"></script>
</body>
</html>

Now create a main.js with the following code, inside of your public folder:

function getUser(userData) {
    if (userData.length == 0) {
        $("#login").show();
    }
    else {
        $("#logout").show();
    }
}

$.get("/user", getUser);

Now go back to your index.html and include the script for both your jquery and main.js, as well as some control for adding photos:

...

<form action="/upload" method="post" enctype="multipart/form-data" id="upload" hidden>
    <input type="text" placeholder="Receiver name" name="receiver"/>
    <input type="file" name="photo"/>
    <button type="submit">Upload</button>
</form>

<div id="photos"></div>

<script src="jquery-2.1.4.min.js"></script>
<script src="main.js"></script>
</body>
</html>

Now we need to add the /upload route to our controller:

    @RequestMapping("/upload")
    public Photo upload(
            HttpSession session,
            HttpServletResponse response,
            String receiver,
            MultipartFile photo
    ) throws Exception {
        String username = (String) session.getAttribute("username");
        if (username == null) {
            throw new Exception("Not logged in.");
        }

        User senderUser = users.findFirstByName(username);
        User receiverUser = users.findFirstByName(receiver);

        if (receiverUser == null) {
            throw new Exception("Receiver name doesn't exist.");
        }

        if (!photo.getContentType().startsWith("image")) {
            throw new Exception("Only images are allowed.");
        }

        File photoFile = File.createTempFile("photo", photo.getOriginalFilename(), new File("public"));
        FileOutputStream fos = new FileOutputStream(photoFile);
        fos.write(photo.getBytes());

        Photo p = new Photo();
        p.sender = senderUser;
        p.receiver = receiverUser;
        p.filename = photoFile.getName();
        photos.save(p);

        response.sendRedirect("/");

        return p;
    }
Now add a get route so we can get our photos:

@RestController
public class IronGramController {
    ...

    @RequestMapping("/photos")
    public List<Photo> showPhotos(HttpSession session) throws Exception {
        String username = (String) session.getAttribute("username");
        if (username == null) {
            throw new Exception("Not logged in.");
        }

        User user = users.findFirstByName(username);
        return photos.findByReceiver(user);
    }
}

Next add the following into your index so we can store photos that we get:

...

<div id="photos"></div>

<script src="jquery-2.1.4.min.js"></script>
<script src="main.js"></script>
</body>
</html>

The last step is to define a JS function to get the photos from the route. Change the existing function in your main.js to match the new getUSer one, as well as add the getPhotos one.

function getPhotos(photosData) {
    for (var i in photosData) {
        var photo = photosData[i];
        var elem = $("<img>");
        elem.attr("src", photo.filename);
        $("#photos").append(elem);
    }
}

$.get("/photos", getPhotos);

function getUser(userData) {
    if (userData.length == 0) {
        $("#login").show();
        $("#upload").hide();
    }
    else {
        $("#logout").show();
        $("#upload").show();
    }
}

$.get("/user", getUser);



Now run your program!

                  Start Paging
--------------------------------------------------------------

Open the Purchases assignment we did for a previous lecture. This project will add paging to it.

The first step is to have PurchaseRepository extend the PagingAndSortingRepository, not the CrudRepository. It should look like this:

public interface PurchaseRepository extends PagingAndSortingRepository<Purchase, Integer> {
    Page<Purchase> findByCategory(Pageable pageable, String category);
}
