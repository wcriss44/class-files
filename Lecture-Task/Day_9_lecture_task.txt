JavaFX is a graphical user interface(GUI)

three functions of classes according to MVC design pattern:

Controller classes   Controls logic of getting input and generating right response/output to view layer
View classes         Present application data, user input
Model classes        Representing facts in the application

model classes get data from: databases, APIs, etc

MVC is a design approach that helps to define the classes in your program. Controller classes act as a bridge between Model classes and View classes. View classes are used to show and display data while model classes are the actual data. In this sense, controller classes contain the actual logic.

Today we will focus on JavaFX, which is the view side of our program.

open Intellij and create a new Java FX Application. Name it ToDoDesktop.

now expand your source packages, go to sample and click on main.

Notice that in your main class, a new object was created using Parent root = FXMLLoader.load(getClass().getResource(sample.fxml"));

Lets launch scene builder and create our own fxml file!

Launch scene builder

open your sample.xfml file in scenebuilder

delete the grid on the left

go back into Intellij, change the title to: ToDoDesktop and change the width and height to be 800 x 600.

Now on scene builder, drag a V box to the screen

now drag a horizontol box to the screen

Lastly, add a listview from controllers

Now change the layout of the list so it can grow:
    go to list view -> layout on the right -> Vgrow:
        change this to always

Now add a text field and three buttons to your Hview

Set hbox Hgrow to always

Now click on button and change text for each to:
    Add
    Remove
    Toggle

    Change the minimum width, under layout, of each button to
    use_pref_size

Go to controller on the bottom left and set the controller class to:
    sample.Controller

In the code section of your elements, set the fxid to:
    list view: list
    text field: text

go back to intellij and type:
    @FXML
    ListView list;

    @FXML
    TextField text;

Make sure that you import javafx.scene.control.*;

Now we need to add the logic to our controller class

First, go into scenebuilder and tell the elements what methods to call

under the code section, select your buttons and add this to the on action section:
    addItem, removeItem, toggleItem

Next, go to intellij and add these three methods:
    public void addItem(){

    }
    public void removeItem(){

    }
    public void toggleItem(){

    }

For now, you can add a println for each method and test it by running your program.

now lets work on our model for the MVC design pattern:

create a class under sample in intellij named ToDoItem

Add two variables:
    String text;
    boolean isDone;

Add a constructor that takes a String:
    public ToDoItem(String text){
        this.text = text;
        this.isDone = false;
    }

add an override of the toString() method:
    @Override
    public String toString(){
        return text + (isDone ? " (done) " : "");
    }

Create an ObservableList from the javafx.collections library
    OberservableList<ToDoItem> items = FXCollection.observableArrayList();

now we need to implement an interface.
    add implements Initializable to your class Controller line

To finish the implementation process, we need to override the initialize method:
    @Override
    public void initialize(URL location, ResourceBundle resources){
        list.setItems(items);
    }

Now add functionality to the addItem() method:
    items.add(new ToDoItem(text.getText()));
    text.setText(""); --This will clear the textfield

Now add functionality to the removeItem() method:
    ToDoItem item = (ToDoItem) list.getSelectionModel().getSelectedItem();
    items.remove(item);

Lastly, add functionality to the toggleItem() method:








