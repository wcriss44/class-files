JavaFX is a graphical user interface(GUI)

three functions of classes according to MVC design pattern:

Controller classes   Controls logic of getting input and generating right response/output to view layer
View classes         Present application data, user input
Model classes        Representing facts in the application

model classes get data from: databases, APIs, etc

MVC is a design approach that helps to define the classes in your program. Controller classes act as a bridge between Model classes and View classes. View classes are used to show and display data while model classes are the actual data. In this sense, controller classes contain the actual logic.

Today we will focus on JavaFX, which is the view side of our program.

open Intellij and create a new Java FX Application. Name it ToDoDesktop.

now expand your source packages, go to sample and click on main.

Notice that in your main class, a new object was created using Parent root = FXMLLoader.load(getClass().getResource(sample.fxml"));

Lets launch scene builder and create our own fxml file!

Launch scene builder

open your sample.xfml file in scenebuilder

delete the grid on the left

go back into Intellij, change the title to: ToDoDesktop and change the width and height to be 800 x 600.

Now on scene builder, drag a V box to the screen

now drag a horizontol box to the screen

Lastly, add a listview from controllers

Now change the layout of the list so it can grow:
    go to list view -> layout on the right -> Vgrow:
        change this to always

Now add a text field and three buttons to your Hview

Set hbox Hgrow to always

Now click on button and change text for each to:
    Add
    Remove
    Toggle

    Change the minimum width, under layout, of each button to
    use_pref_size

Go to controller on the bottom left and set the controller class to:
    sample.Controller

In the code section of your elements, set the fxid to:
    list view: list
    text field: text

go back to intellij and type:
    @FXML
    ListView list;

    @FXML
    TextField text;

Make sure that you import javafx.scene.control.*;

Now we need to add the logic to our controller class

First, go into scenebuilder and tell the elements what methods to call

under the code section, select your buttons and add this to the on action section:
    addItem, removeItem, toggleItem

Next, go to intellij and add these three methods:
    public void addItem(){

    }
    public void removeItem(){

    }
    public void toggleItem(){

    }

For now, you can add a println for each method and test it by running your program.

now lets work on our model for the MVC design pattern:

create a class under sample in intellij named ToDoItem

Add two variables:
    String text;
    boolean isDone;

Add a constructor that takes a String:
    public ToDoItem(String text){
        this.text = text;
        this.isDone = false;
    }

add an override of the toString() method:
    @Override
    public String toString(){
        return text + (isDone ? " (done) " : "");
    }

Create an ObservableList from the javafx.collections library
    OberservableList<ToDoItem> items = FXCollection.observableArrayList();

now we need to implement an interface.
    add implements Initializable to your class Controller line

To finish the implementation process, we need to override the initialize method:
    @Override
    public void initialize(URL location, ResourceBundle resources){
        list.setItems(items);
    }

Now add functionality to the addItem() method:
    items.add(new ToDoItem(text.getText()));
    text.setText(""); --This will clear the textfield

Now add functionality to the removeItem() method:
    ToDoItem item = (ToDoItem) list.getSelectionModel().getSelectedItem();
    items.remove(item);

Lastly, add functionality to the toggleItem() method:
    ToDoItem item = (ToDoItem) list.getSelectionModel().getSelectedItem();

    if (item != null) {
    item.isDone = !item.isDone;
    list.refresh();
    }

Run your program! It should be working!

our next program we will create is.... a web browser!

Start by making a new JavaFX application named BrowserDesktop

set your title to: Desktop Browser and width/height to 800x600

run to verify it launches

Open sample.fxml in scene builder for your BrowserDesktop project

now delete the GridPane that is currently there

Add a Vbox element with the following inside:
    -Hbox
    -WebView

for your WebView, select the VGrow element under layout and set it to Always

Inside of your Hbox, add these elements:
    -Three buttons
    -TextField

Name your buttons:
    -Go
    -Back
    -Forward

Set minimum width to user_pref_size for all three buttons

set Hgrow to always for the TextField

now save and run on your intellij to make sure it loads

Add Sample.Controller to controller class for your project in scenebuilder on the bottom left


now add our textfield id to your controller class in Intellij

import javafx.scene.control.TextField;
import javafx.scene.web.WebView;

  @FXML
  TextField addressBar;

  @FXML
  WebView webView;

Go to scene builder and add a method call to each button for on Action:
    goToUrl, goForward, goBack

now go to Intellij and add the three methods to your controller class:
    public void goBack(){

    }
    public void goForward(){

    }
    public void goToUrl(){

    }

You can add a System.out.println() for each one and test their functionality.

now add functionality to the goToUrl() method:
    String URL = addressBar.getText();
        if(!url.startsWith("http")){
            url = "http://" + url;
       }
    webView.getEngine().load(url);
    }

now add functionality to goBack() method:
    try {
        webView.getEngine().getHistory().go(-1);
    }
    catch (Exception e) {

    }

Do the same for goForward() as you did for goBack() except change -1 to 1

now we need to detect an event on our controller class
    public void onKeyPressed(KeyEvent event){
        if (event.getCode() == KeyCode.ENTER){
            goToUrl();
        }
    }

Now use it in scenebuilder:
    go to your TextField -> code -> keyboard -> OnKeyPressed
        enter your onKeyPressed method here

Next, lets implement Initializable and override the initialize method:
    add implements Initializable, ChangeListener to your class declaration line

    Add two overrides:
    @Override
    public void initialize(URL location, ResourceBundle resources){
        Worker work = webView.getEngine().getLoadWorker();
        worker.stateProperty().addListener(this);
    }

    @Override
    public void changed(ObservableValue observerable, Object oldValue, Object){
        addresBar.setText(webView.getEngine().getLocation());
    }

    Also make sure to setID of webView to webView!










