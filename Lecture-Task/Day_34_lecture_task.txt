Today's topic will be on HTML.

An HTML page contains several tags, which help to define how the content should be displayed. Some common tags are:

<body> </body> (defines the body of a page)
<p> </p> (found within a body, defines a paragraph)
<a> </a> (found within a body, defines an anchor)
<ul> </ul> (found within a body, defines an unordered list)
<br> (found within a body, defines a break)

There are many more elements, which we will take a look at as the lecture goes on.

The Document Object Model, or DOM, is an import concept within HTML. The DOM is defined by the browser for languages like HTML, XML, and SVG. the DOM defines a "tree" structure for the webpage, which results in a "parent" and "child" element. In addition, it defines events that we can watch for. Javascript is able to be used to target elements and watch for events. This allows us to build dynamic and interactive websites.

Another important part of HTML is the use of attributes and special content.

attributes are used to define how an element should behave. Take for example the following:
    <a href="http://www.theironyard.com">The Iron Yard's Homepage</a>

In this section of code, <a ...> </a> is an anchor element. This element contains a single attribute, called href. Href is assigned the value of "http://www.theironyard.com". In this way, the href defines how this element should behave. That is to say, the href is used to specify what address the anchor element should go to.

There are many attributes in HTML, and not ever element can have them. Just as well, some elements require specific attributes in order to work correctly, such as the anchor element.

Some other examples of the use of attributes:
    <img src="red-panda.jpeg" alt="Adorable red panda cub laying in grass.">
    <a href="cool-site.com"><img src="link-image.png" alt="Images can be links, too!"></a>

Here is a more complex example of structure that embeds an anchor element within a paragraph element:
    <p>Click <a href="www.theironyard.com">here</a> to visit The Iron Yard's homepage.</p>
This will cause the link to be wrapped inline with the paragraph text.

In addition to manditory ones, such as src and href, there are a few optional ones. The most common optional ones are:
    class
    id
    style

The class is used to define what styling "class" the element is. You can define that class in your stylesheet and apply the class to all elements that you want the style to apply to. This allows us to rapidly style related sections of our code.

The id attribute is used to identify a single element within your html page. This is able to be used for two purposes, one to target an element through a programming language such as JavaScript, or to target an element through CSS. The important distinction here is that id is used for a single element, and as such can only occur once on an html page. A class can occur multiple times.

The style attribute is used to declare inline styles. By thsi point you should realize that there are quite a few ways to declare styles. First, we can declare them within a stylesheet that is external to our HTML. The next way is to include styles within our head section. The last way is to use inline styles with the style="" attribute. This is important because it shows the cascading nature of CSS. The "last" style to be applied is the one that is applied. A stylesheet is applied first, style blocks next, and inline styles last. We can use this to override specific styles on our page.

Now lets talk about text content. At the end of the day, a website is designed to provide information to a user. This is often accomplished through the use of text. Here are some elements that you can use to markup your text:

<p> </p>    This is a paragraph element
<h1> </h1>  through <h5> </h5>    This is for headings and titles

<span> </span> this is used for inline text and allows you to single out text that is contained within a block of text, such as a <p>. This is often done to allow you to style that specific text with out effecting the rest of the text.

<blockquote> </blockquote> This is for primarily used to designate quoted sections that can be styled through CSS.

<em> </em> , <strong> </strong> em designates italic text while strong designates bold text. These are both used inline, such as within a <p> element.

<br> is a self closing element that is used to designate a break within the page (think of this as new line)

Now lets take a look at list of related text. This will often be used as a backend developer to display data that that should be organized in a related fashion.

<ol> </ol> This will display your data as an ordered list, where each element is has an increasing number. <ol> requires the use of <li> </li> to designate a new list element (list)

<ul> </ul> works in much the same way was <ol>. The only difference is each <li> element is displayed with a bullet point and not a number.

The last important one to talk about is table. A table is set up in the following way:

    <table>
      <thead>
        <tr>
          <th> </th>
          <th> </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td> </td>
          <td> </td>
        </tr>
      </tbody>
    </table>

In the previous block of code, we have a containing <table> element that wraps around a <thead> and <tbody> element. Within each of these we have a <tr> element. The <tr> within <thead> contains <th> elements, each representing a column. The <tr> within the <tbody> contains <td> elements, each one representing a data element for a respective column heading.

The next thing to learn about is the <div> element. <div> is an element that is used to contain content within a section of the page. a division element (<div>) will extend across the entire page unless we specify it different. Division elements are commonly used to organize related data.

Semantic HTML:

Here are the common "semantic" elements that are used to organize content, much like a div element. The difference is, these elements use english to communicate their intent, rather than a bunch of <div> elements on your page. Here are the common ones:

<header> </header>
<nav> </nav>
<main> </main>
<article> </article>
<section> </section>
<aside> </aside>
<footer> </footer>

The header and footer represent the top and bottom of your page. Content that is related to this section should be contained within these elements, not div elements. The nav element should be used for navigation, to include navigation menus on the side.

The main, article, section, and aside elements are used to define content that is contained in the "bulk" of your page. The main is for the main section of content, the article is for major sections of content, such as a lession or a news article.

The section element allows us to have unique sections, and is often used with self containing header elements. Such a case might happen when we have multiple articles on a single page.

The aside element is for "sidebar" content, such as advertisements or side based navigation.


