SQL and database
SQL - Structured Query Language
RDBMS - Relational Database Management Systems
DDL - Data Definition Language
DML - Data Modification Language

What are some benefits of using a database, and why would we want to use one?
    -They allow us to manage large amounts of data, with the ability to retrieve the data quickly
    -They have the ability to be added to with out needing to rewrite the entire database (as opposed to a file)
    -They support multi users, allowing more than one program to write and read from the database

SQL is a popular database type. SQL was developed by IBM in the 70s

Some basic SQL commands:
    CREATE TABLE
    INSERT  create a record in the database -
    SELECT  Select data from the database    |  These four are CRUD
    UPDATE  Update data in the database      |
    DELETE  remove data from the database   -

Some of the variables in SQL:
    VARCHAR: (String in Java)
    BOOLEAN: (boolean in Java)
    INT:     (int in Java)
    DOUBLE:  (double in Java)

Some commands that you might use in SQL, based on the TextAdventure game we made:

    CREATE TABLE players (name VARCHAR, is_alive BOOLEAN, score INT, health DOUBLE)

    INSERT INTO players VALUES('Bob', true, 0, 100.0)

    SELECT * FROM players WHERE name = 'Bob'

    UPDATE players SET is_alive = FALSE WHERE name = 'Bob'

    DELETE FROM players WHERE name = 'Bob'

    DROP TABLE players

Notice with the example above, all SQL commands are capital and non-SQL commands are snake_case
The * is used to select all fields, or you can specify, with comma seperation, which fields you want to select

Another thing to notice is that we can delete entries in a table based on a specified field. This is powerful because we can have a unique identifier that only one entery will be removed, or choose to delete al large collection of data, such as all players with is_alive false. The same concept can be seen with Update, allowing us to update single or multi entries witht he same command. Keep this in mind!

As a side note, you can use limit in place of where, followed by a number, when selecting a record.


Lets make an example database program. Open Intellij and create a new project called HelloDatabase. Using Maven, add the following library: com.h2database:h2:1.4.191

Next, add the following line to your program in main. Make sure to catch the exception or declare that main throws an exception. Also, don't forget your imports:

  Server.createWebServer().start();

This will start the webserver for H2. H2 is a lightweight database that is embedded inside of your project. Your data is stored in a single file on your disk.

After running your program, open your web browser and navigate to "http://localhost:8082"

Next, change the JDBC url to jdbc:h2:./main

This will save your data within a filed called main.mv.db in your project's directory, rathe than a location in your home folder.

Make sure that the username and password are blank and click connect.

Once you connect, lets try to run the 5 commands we learned. However, we are going to add a new column called id which assigns a unique number to each record starting at 1. Most databases have a function to do this, and for h2 it is called IDENTITY. IDENTITY will automatically increment for you. Also to note, the IDENTITY should be NULL so that the database will automatically assign the database value.

Lets start by creating our table. In the box, enter this command:

    CREATE TABLE players (id IDENTITY, name VARCHAR, is_alive BOOLEAN, score INT, health DOUBLE)

This will create the database for you. Now, run these commands and see the results:


    INSERT INTO players VALUES(NULL, 'Bob', true, 0, 100.0)

    SELECT * FROM players WHERE name = 'Bob'

    UPDATE players SET is_alive = FALSE WHERE name = 'Bob'

    DELETE FROM players WHERE name = 'Bob'

This is a great way to see how the database is working, but wouldn't it be nice to do this from Java? Lets see how this would work!

Go back to your IntelliJ and in the main class create a database connect to the JDBC URL we have been using:

    Connection conn = DriverManager.getConnection("jdbc:h2:./main");

Now you can run some commands. Copy and paste the lines below into your Main method for Java. Note that every time you start and stop your program, a new record will be created for everything.

package com.novauc;

import org.h2.tools.Server;

import java.sql.*;

public class Main {

    public static void main(String[] args) throws SQLException{
        /**
         * This starts your database
         */
        Server.createWebServer().start();
        Connection conn = DriverManager.getConnection("jdbc:h2:./main2");

        /**
         * This will create a SQL statement, named stmt, and execute it
         */
        Statement stmt = conn.createStatement();

        stmt.execute("CREATE TABLE IF NOT EXISTS players(id IDENTITY, name VARCHAR, is_alive BOOLEAN, score INT, health DOUBLE) ");
        stmt.execute("INSERT INTO players VALUES(NULL, 'Alice', true, 0, 100.0)");


        /**
         * The above is dangerous because of SQL injection attacks.
         * This code below will prepare a statement that allows you
         * to add the values
         */
        PreparedStatement stmt2 = conn.prepareStatement("INSERT INTO players VALUES(Null, ?, ?, ?, ?)");
        stmt2.setString(1, "Charlie");
        stmt2.setBoolean(2, true);
        stmt2.setInt(3, 0);
        stmt2.setDouble(4, 100.0);
        stmt2.execute();

        /**
         * We can even use a prepareSTatement for a query, as seen below
         */
        PreparedStatement stmt3 = conn.prepareStatement("SELECT * FROM PLAYERS");
        ResultSet results = stmt3.executeQuery();

        /**
         * Loop over the result set created above and print out the results
         */
        while(results.next()){
            String playerName = results.getString("name");
            double health = results.getDouble("health");
            int score = results.getInt("score");
            System.out.printf("%s: %s health and a score of %s\n", playerName, health, score);
        }

    }
}


Next, lets look at our ToDo project from the past. We will add a database to it.

Open your project and add the following to your main method:

    Server.createWebServer().start();
    Connection conn = DriverManager.getConnection("jdbc:h2:./main");
    Statement stmt = conn.createStatement();
    stmt.execute("CREATE TABLE IF NOT EXISTS todos (id IDENTITY, text VARCHAR, is_done BOOLEAN)");

Next, create three static methods to use your database. These should be created outside of main, but within your todo class:

    public static void insertToDo(Connection conn, String text) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement("INSERT INTO todos VALUES (NULL, ?, false)");
        stmt.setString(1, text);
        stmt.execute();
    }

    public static ArrayList<ToDoItem> selectToDos(Connection conn) throws SQLException {
        ArrayList<ToDoItem> items = new ArrayList<>();
        Statement stmt = conn.createStatement();
        ResultSet results = stmt.executeQuery("SELECT * FROM todos");
        while (results.next()) {
            int id = results.getInt("id");
            String text = results.getString("text");
            boolean isDone = results.getBoolean("is_done");
            items.add(new ToDoItem(id, text, isDone));
        }
        return items;
    }

    public static void toggleToDo(Connection conn, int id) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement("UPDATE todos SET is_done = NOT is_done WHERE id = ?");
        stmt.setInt(1, id);
        stmt.execute();
    }

The last thing we need to do is change our if statements in the main method to reflect the following:

    public static void main(String[] args) throws SQLException {
        ...

        while (true) {
            System.out.println("1. Create to-do item");
            System.out.println("2. Toggle to-do item");
            System.out.println("3. List to-do items");

            String option = scanner.nextLine();

            if (option.equals("1")) {
                System.out.println("Enter your to-do item:");
                String text = scanner.nextLine();

                //ToDoItem item = new ToDoItem(text, false);
                //items.add(item);
                insertToDo(conn, text);
            }
            else if (option.equals("2")) {
                System.out.println("Enter the number of the item you want to toggle:");
                int itemNum = Integer.valueOf(scanner.nextLine());
                //ToDoItem item = items.get(itemNum-1);
                //item.isDone = !item.isDone;
                toggleToDo(conn, itemNum);
            }
            else if (option.equals("3")) {
                ArrayList<ToDoItem> items = selectToDos(conn);
                //int i = 1;
                for (ToDoItem item : items) {
                    String checkbox = "[ ]";
                    if (item.isDone) {
                        checkbox = "[x]";
                    }
                    System.out.printf("%s %d. %s\n", checkbox, item.id, item.text);
                    //i++;
                }
            }
            else {
                System.out.println("Invalid option");
            }
        }
    }


You may need to change your ToDoItem class to reflect some of these changes, such as adding an ID variable.

Once you are set, run your program and test it out!