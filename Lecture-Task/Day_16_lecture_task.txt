Today's lecture is going to focus on using some of the more advanced features of Spark.

Key notes from lecture:
  Think about things in terms of system boundaries. This will help you to understand what is happening in code that you are having trouble with. Take for example the get / route below. We know that it returns an objct, called ModelAndView. Specifically, it returns a new one that is given two objects: m, and "home.html".

  So what is m and "home.html"? m is a hashmap that was declared in the get / route. "home.html" is a String that, as the name would suggest, represents the home.html file.

  In this sense, we can then find out more about our hashmap, named m. We can follow through the method, in a reverse order, to see the flow of data and understand the logic behind the method.


  ---

  You can send data to the server by using key/value pair. This is done with a question mark and equal sign. For example:

  /?replyId={{id}}


  When you do a get request, your parameters are sent through the URL

  When you do a post request, you send your data packaged as a payload

  When a web browser request an address, it will always be a get request. Likewise, the only way you can do a post request is through a form in HTML.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Lets start by creating a new project called ForumWeb. Once your project is open, import the following libraries:
    com.sparkjava:spark-core:2.3
    com.sparkjava:spark-template-mustache:2.3

Next, create a folder called resources, under your main package by going to project structure -> modules. Label this folder as resources and within it create a folder called templates.

Lets start by creating a class to represent a message.

  public class Message {
      int id;
      int replyId;
      String author;
      String text;

      public Message(int id, int replyId, String author, String text) {
          this.id = id;
          this.replyId = replyId;
          this.author = author;
          this.text = text;
      }
  }

next, we need a class for our user:

    public class User {
        String name;

        public User(String name){
            this.name = name;
        }
    }

Now, in your main class, start by making a HashMap and an ArrayList. The ArrayList is for messages so we can track everyone's messages. The HashMap is to store our users.

  ...
  public class Main{
      static HashMap<String, User> users = new HashMap<>();
      static ArrayList<Message> messages = new ArrayList<>();

      public static void main(String args[]){
          //future code here
      }
  }

Now lets make a way to insert test data into our data structures. This will help us to continuously test our app as we make it.

  ....
  public static void main(String[] args){
      addTestUsers();
      addTestMessages();
  }
  public static void addTestUsers(){
      users.put("Alice", new User("Alice"));
      users.put("Bob", new User("Bob"));
      users.put("Charlie", new User("Charlie"));
  }
  public static void addTestMessages(){
      messages.add(new Message(0, -1, "Alice", "Hello world!"));
      messages.add(new Message(1, -1, "Bob", "This is another thread!"));
      messages.add(new Message(2, 0, "Charlie", "Cool thread, Alice!"));
      messages.add(new Message(3, 2, "Alice", "Thanks"));
  }

  Now that we have some test data, lets get some HTML work done. Create a new HTML file in templates and name it home.html. Add the following:

      <html>
          <body>
              {{#messages}}
                  {{author}}: {{text}}<br>
              {{/messages}}
          </body>
      <html>

Next, we can create a / route to send the html:

  ...
  public static void main(String[] args){
      ...

      Spark.init();
      Spark.get(
                        "/",
                ((request, response) -> {
                    HashMap m = new HashMap();
                    ArrayList<Message> threads = new ArrayList<>();
                    for (Message message : messages) {
                        if (message.replyId == -1) {
                            threads.add(message);
                        }
                    }
                    m.put("messages", threads);
                    return new ModelAndView(m, "home.html");
                }),
                new MustacheTemplateEngine()
        );
    }
  }

When you finish the above, you should be able to see top level messages(the messages with a -1 replyId).

Lets now add a way to get a specific id by having the user query for it. Change your get route to be the following:

        Spark.get(
                "/",
                ((request, response) -> {
                    String replyId = request.queryParams("replyId");
                    int replyIdNum = -1;
                    if (replyId != null) {
                        replyIdNum = Integer.valueOf(replyId);
                    }

                    HashMap m = new HashMap();
                    ArrayList<Message> threads = new ArrayList<>();
                    for (Message message : messages) {
                        if (message.replyId == replyIdNum) {
                            threads.add(message);
                        }
                    }
                    m.put("messages", threads);
                    return new ModelAndView(m, "home.html");
                }),
                new MustacheTemplateEngine()
        );

Next, we have to add our login system:

Spark.post(
                "/login",
                ((request, response) -> {
                    String userName = request.queryParams("loginName");
                    if (userName == null) {
                        throw new Exception("Login name not found.");
                    }

                    User user = users.get(userName);
                    if (user == null) {
                        user = new User(userName);
                        users.put(userName, user);
                    }

                    Session session = request.session();
                    session.attribute("userName", userName);

                    response.redirect("/");
                    return "";
                })
        );

Next, lets modify our get method again to track our session for login. Add the following code, replacing where needed:

                    Session session = request.session();
                    String userName = session.attribute("userName");

                    m.put("messages", threads);
                    m.put("userName", userName);
                    return new ModelAndView(m, "home.html");
                }),
                new MustacheTemplateEngine()

Now we can modify our HTML so it conditionally shows login if you are not logged in. Change your HTML file to reflect this:

    <html>
  <body>
    {{^userName}}
      <form action="/login" method="post">
          <input type="text" placeholder="Enter your name" name="loginName"/>
          <button type="submit">Login</button>
      </form>
      <br>
      {{/userName}}
      {{#userName}}
        Welcome, {{.}}!
        <br>
        {{/userName}}

        {{#messages}}
          <a href="/?replyId={{id}}">{{author}}: {{text}}</a><br>
        {{/messages}}
  </body>
</html>

Now we can add a logout button to our HTML. As always, replace where needed and add if it doesn't exist:

    <html>
<body>
...

{{#userName}}
Welcome, {{.}}!
<form action="/logout" method="post">
    <button type="submit">Logout</button>
</form>
<br>
{{/userName}}

...
</body>
</html>

Now we just need a post route. Add the following to your main method:

            Spark.post(
                "/logout",
                ((request, response) -> {
                    Session session = request.session();
                    session.invalidate();
                    response.redirect("/");
                    return "";
                })
        );

Now run your new forum!

